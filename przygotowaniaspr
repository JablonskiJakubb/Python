
#T = [2, 3, 2, 2, 0, 2, 2, 5, 5]
# 
# def lider():
#   licznik = 1
#   kandydat = T[0]
#   for i in range (1, len(T)):
#     if licznik == 0:
#       kandydat = T[i]
#       licznik = 1
#     else:
#       if kandydat == T[i]: licznik += 1
#       else: licznik -= 1
# 
#   ilośćk = 0
#   if licznik == 0:
#     print("brak")
#   else: 
#     for i in range(len(T)):
#       if kandydat == T[i]:
#         ilośćk += 1
#     if (ilośćk > len(T)//2):
#       print("liderem jest", kandydat)
# lider()
#def lider():
#  l = 1
#  k = T[0]
#  for i in range(1,len(T)):
#    if l == 0:
#      k = T[i]
#      l = 1
#    else:
#      if k == T[i]: l += 1
#      else: l-= 1

#  lk = 0
#  if l == 0: print("brak lidera")
#  else:   
#    for i in range(len(T)):
#      if k == T[i]: lk +=1
#    if lk > len(T)//2: print("lider to", k)

#monte carlo
#import random
#import math




# def montecarlo(n):
#     licznik = 0
#     for _ in range(n):
#         x = random.uniform(-1,1)
#         y = random.uniform(-1,1)
#         if x**2 + y**2 <= 1:
#             licznik +=1
#     return 4*licznik/n
# 
# print(montecarlo(10))





# def montecarlo(n):
#   l = 0
#   for _ in range (n):
#     x = random.uniform(-1,1)
#     y = random.uniform(-1,1)
#     if x**2 + y**2 <= 1:
#       l += 1
#   return 4*l/n
# print(montecarlo(100))
 
#def nr(a,n):
#  p = a
#  b = 1
#  for _ in range (n):
#    p = (p + b) / 2
#    b = a/p
#  return p

#print(nr(16,8))

#def f(x): 
#  return -x**2 + 6*x + 2
  
#def bisekcja (a, b, epsilon):
#  while abs(b - a) > epsilon:
#    c = (a + b) / 2
#    if f(c) == 0:
#      return c
#    elif f(a) * f(c) < 0:
#      b = c
#    else:
#     a = c

#  return (a + b) / 2
    
#def bisekcja2(a, b, n):
  for _ in range(n):
      c = (a + b) / 2
      if f(c) == 0:
          return c
      elif f(a) * f(c) < 0:
          b = c
      else:
          a = c
#return (a + b) / 2


  
#def prostokaty1(a, b, n):
  dx = (b - a) / n
  s = 0
  for i in range(n):
      s += f(a + i * dx) * dx
 # return s

#def prostokaty(a,b,n):
  dx = (b-a) /n
  s = 0
  for i in range(n):
    s += f(a + i * dx)
  return s * dx

#def prostokaty2(a,b,n):
  dx = (b - a) /n
  s = 0
  for i in range(n):
    s += (a + dx/2 + i * dx)
  return s * dx

#def prostokaty3(a,b,n):
  dx = (b -a) /n
  s = 0
  for i in range(n):
    s+=(a+ dx + i * dx)
  return s *dx

#def trapezy(a,b,n):
  dx = (b - a)/n
  s = 0
  for i in range(n):
    s += f(a + i * dx) + f(a + (i+1) * dx)
    return s * dx / 2

#def trapezy2 (a,b,n):
  dx = (b - a) /n
  s = f(a) + f(b)
  for i in range (1, n-1):
    s += 2 * f(a + i * dx)
  return s * dx / 2


  
